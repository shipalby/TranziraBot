import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
import logging
from collections import defaultdict
from datetime import datetime

API_TOKEN = os.getenv("BOT_TOKEN")  # –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_expenses = defaultdict(lambda: defaultdict(int))  # user_expenses[user_id][category] = amount

# –ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, –î–∞–Ω–∏–∫ –ë–æ–≥ –¢—Ä–∞—Ç –∏ –ê—Ä–∏–Ω–∞ –ë–æ–≥–∏–Ω—è –≠–∫–æ–Ω–æ–º–∫–∏! üëëüí∞\n"
        "–Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –±—é–¥–∂–µ—Ç –≤ –ø–æ—Ä—è–¥–∫–µ!\n"
        "–¢—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Ä–∞—Å—Ö–æ–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å—É–º–º–∞' (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ï–¥–∞ 20').\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /report –¥–ª—è –æ—Ç—á–µ—Ç–∞ –∏ /top_spender –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–º–æ–≥–æ —Ç—Ä–∞–Ω–∂–∏—Ä–Ω–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è!\n"
        "–ü–æ–µ—Ö–∞–ª–∏! üöÄ"
    )

# –ö–æ–º–∞–Ω–¥–∞ /report –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—â–µ–π —Å—É–º–º—ã
@dp.message_handler(commands=['report'])
async def cmd_report(message: types.Message):
    user_id = message.from_user.id
    total_spent = sum(user_expenses[user_id].values())  # –û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
    await message.answer(f"üí∏ –û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total_spent} ‚Ç¨")

# –ö–æ–º–∞–Ω–¥–∞ /top_spender –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ç—Ä–∞—Ç–∏–ª–∞
@dp.message_handler(commands=['top_spender'])
async def cmd_top_spender(message: types.Message):
    top_user = max(user_expenses, key=lambda user: sum(user_expenses[user].values()), default=None)
    if top_user is None:
        await message.answer("üö® –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å–∞–º–æ–≥–æ —Ç—Ä–∞–Ω–∂–∏—Ä–Ω–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è!")
    else:
        top_amount = sum(user_expenses[top_user].values())
        await message.answer(f"üèÜ –°–∞–º—ã–π —Ç—Ä–∞–Ω–∂–∏—Ä–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å: {top_user} —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏: {top_amount} ‚Ç¨")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤
@dp.message_handler()
async def handle_expense(message: types.Message):
    try:
        user_id = message.from_user.id
        text = message.text.strip().split()
        if len(text) != 2:
            await message.answer("‚ùå –§–æ—Ä–º–∞—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å—É–º–º–∞'. –ù–∞–ø—Ä–∏–º–µ—Ä: '–ï–¥–∞ 20'.")
            return
        
        category = text[0]  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±—ã–º —Ç–µ–∫—Å—Ç–æ–º
        amount = float(text[1])  # –°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–∞
        
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
            return
        
        user_expenses[user_id][category] += amount  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —Ç—Ä–∞—Ç—ã –±–æ–ª—å—à–µ 20 –µ–≤—Ä–æ –≤ –¥–µ–Ω—å
        if amount > 20:
            await message.answer("üí∏ –≠, –ø–æ–ª–µ–≥—á–µ, —Ç—Ä–∞–Ω–∂–∏—Ä–∞! –Ø —Ç—É—Ç –ø—ã—Ç–∞—é—Å—å —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –¥–µ–Ω—å–≥–∏! üòÖ")

        # –ü–æ—Ö–≤–∞–ª–∞ –∑–∞ —ç–∫–æ–Ω–æ–º–∏—é (–µ—Å–ª–∏ —Ç—Ä–∞—Ç –º–µ–Ω—å—à–µ –≤—Å–µ—Ö)
        min_spender = min(user_expenses, key=lambda user: sum(user_expenses[user].values()))
        if user_id == min_spender:
            await message.answer(f"üéâ –¢—ã –∫–æ—Ä–æ–ª—å —ç–∫–æ–Ω–æ–º–∏–∏, {message.from_user.first_name}!")
        
        await message.answer(f"‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω: {category} - {amount} ‚Ç¨")

    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å—É–º–º–∞'. –ù–∞–ø—Ä–∏–º–µ—Ä: '–ï–¥–∞ 20'.")

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True)
