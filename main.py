import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
from collections import defaultdict
import datetime

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv('BOT_TOKEN')

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
expenses = defaultdict(lambda: defaultdict(float))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    welcome_message = (
        "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –î–∞–Ω–∏–∫ –±–æ–≥ —Ç—Ä–∞—Ç –∏ –ê—Ä–∏–Ω–∞ –±–æ–≥–∏–Ω—è —ç–∫–æ–Ω–æ–º–∫–∏! ‚ú®\n"
        "–¢—ã –Ω–∞ —Å–≤—è–∑–∏ —Å –º–æ–∏–º —Å—É–ø–µ—Ä-–±–æ—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—Å–µ —Ç–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã –∏ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è! üí∏\n"
        "–ë—É–¥—å –≥–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º –≤ –º–∏—Ä–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤! üìà\n\n"
        "–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?\n"
        "/help - –£–∑–Ω–∞—Ç—å, –∫–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å üíÅ‚Äç‚ôÇÔ∏è\n"
        "/report - –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º üìä\n"
        "/top_spender - –£–∑–Ω–∞—Ç—å, –∫—Ç–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª –±–æ–ª—å—à–µ –≤—Å–µ—Ö üí∞"
    )
    await message.reply(welcome_message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message_handler(commands=['help'])
async def send_help(message: types.Message):
    await message.reply(
        "–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É:\n"
        "/report - –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç –ø–æ –≤—Å–µ–º —Ä–∞—Å—Ö–æ–¥–∞–º üìä\n"
        "/top_spender - –£–∑–Ω–∞—Ç—å, –∫—Ç–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ üí∞\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π —Å–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å—É–º–º–∞' üìù\n"
        "–ü—Ä–∏–º–µ—Ä: '–ï–¥–∞ 15.5'\n"
        "–ï—Å–ª–∏ —Ç—Ä–∞—Ç–∏—à—å –±–æ–ª—å—à–µ 20 –µ–≤—Ä–æ –≤ –¥–µ–Ω—å, —è —Å–∫–∞–∂—É —Ç–µ–±–µ: '–≠, –ø–æ–ª–µ–≥—á–µ, —Ç—Ä–∞–Ω–∂–∏—Ä–∞!' üòÇ"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏
@dp.message_handler(lambda message: len(message.text.split()) == 2)
async def handle_expenses(message: types.Message):
    try:
        category, amount = message.text.split()
        amount = float(amount)
        user_id = message.from_user.id

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥ –≤ —Å–ª–æ–≤–∞—Ä—å
        expenses[user_id][category] += amount

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–æ–ª—å—à–∏–µ —Ç—Ä–∞—Ç—ã
        if amount > 20:
            await message.reply(f"–≠, –ø–æ–ª–µ–≥—á–µ, —Ç—Ä–∞–Ω–∂–∏—Ä–∞! üòú –¢—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª {amount} –µ–≤—Ä–æ –Ω–∞ '{category}' —Å–µ–≥–æ–¥–Ω—è. –Ø —Ç—É—Ç –ø—ã—Ç–∞—é—Å—å —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –¥–µ–Ω—å–≥–∏! üòÖ")
        else:
            await message.reply(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª —Ç–≤–æ–π —Ä–∞—Å—Ö–æ–¥: {category} - {amount} –µ–≤—Ä–æ üõçÔ∏è")

    except ValueError:
        await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å—É–º–º–∞' üìù")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /report
@dp.message_handler(commands=['report'])
async def report(message: types.Message):
    user_id = message.from_user.id
    if expenses[user_id]:
        total_spent = sum(expenses[user_id].values())
        report_message = "–í–æ—Ç —Ç–≤–æ–π –æ—Ç—á–µ—Ç –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –∑–∞ –º–µ—Å—è—Ü üßæ:\n"
        for category, amount in expenses[user_id].items():
            report_message += f"{category}: {amount} –µ–≤—Ä–æ\n"
        report_message += f"\n–û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total_spent} –µ–≤—Ä–æ üí∏"
        await message.reply(report_message, parse_mode=ParseMode.MARKDOWN)
    else:
        await message.reply("–¢—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª –Ω–∏–∫–∞–∫–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤. –î–æ–±–∞–≤—å –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /help üìù")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /top_spender
@dp.message_handler(commands=['top_spender'])
async def top_spender(message: types.Message):
    if not expenses:
        await message.reply("–ï—â–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö. –ù–∞—á–Ω–∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –ø–µ—Ä–≤—ã–º! üìù")
        return

    top_spender_user = max(expenses, key=lambda user: sum(expenses[user].values()), default=None)

    if top_spender_user is not None:
        total_spent = sum(expenses[top_spender_user].values())
        await message.reply(f"–¢–æ–ø-—Ç—Ä–∞–Ω–∂–∏—Ä–∞ —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {top_spender_user}! üí∏ –û–Ω –ø–æ—Ç—Ä–∞—Ç–∏–ª {total_spent} –µ–≤—Ä–æ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –¢—ã —Å–ª–∏—à–∫–æ–º —â–µ–¥—Ä! üò±")
    else:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞—Ç–∞—Ö.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
async def daily_report():
    for user_id, user_expenses in expenses.items():
        total_spent = sum(user_expenses.values())
        if total_spent > 20:
            await bot.send_message(
                user_id,
                f"–≠–π, {user_id}, —Ç—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª –±–æ–ª—å—à–µ 20 –µ–≤—Ä–æ —Å–µ–≥–æ–¥–Ω—è! üí∏ –ü–æ–ª–µ–≥—á–µ, —Ç—Ä–∞–Ω–∂–∏—Ä–∞! üòú"
            )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
