import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import logging
from collections import defaultdict
from datetime import datetime

API_TOKEN = os.getenv("BOT_TOKEN")  # –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_expenses = defaultdict(list)  # user_expenses[user_id] = [(category, amount, date)]

# –ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, –î–∞–Ω–∏–∫ –ë–æ–≥ –¢—Ä–∞—Ç –∏ –ê—Ä–∏–Ω–∞ –ë–æ–≥–∏–Ω—è –≠–∫–æ–Ω–æ–º–∫–∏! üëëüí∞\n"
        "–Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –±—é–¥–∂–µ—Ç –≤ –ø–æ—Ä—è–¥–∫–µ!\n"
        "–¢—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Ä–∞—Å—Ö–æ–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å—É–º–º–∞' (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ï–¥–∞ 20').\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /report –¥–ª—è –æ—Ç—á–µ—Ç–∞, /top_spender –¥–ª—è —Å–∞–º–æ–≥–æ —Ç—Ä–∞–Ω–∂–∏—Ä–Ω–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∏ /delete_expenses –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤!\n"
        "–ü–æ–µ—Ö–∞–ª–∏! üöÄ"
    )

# –ö–æ–º–∞–Ω–¥–∞ /report –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—â–µ–π —Å—É–º–º—ã
@dp.message_handler(commands=['report'])
async def cmd_report(message: types.Message):
    user_id = message.from_user.id
    if not user_expenses[user_id]:
        await message.answer("üìä –¢—ã –µ—â—ë –Ω–µ —Å–¥–µ–ª–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞. –ù–∞—á–Ω–∏ —Ç—Ä–∞—Ç–∏—Ç—å! üòâ")
    else:
        report = "üí∏ –¢–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã:\n"
        total_spent = 0
        for category, amount, _ in user_expenses[user_id]:
            report += f"‚Ä¢ {category}: {amount:.2f} ‚Ç¨\n"
            total_spent += amount
        report += f"üîπ –û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total_spent:.2f} ‚Ç¨"
        await message.answer(report)

# –ö–æ–º–∞–Ω–¥–∞ /top_spender –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ç—Ä–∞—Ç–∏–ª–∞
@dp.message_handler(commands=['top_spender'])
async def cmd_top_spender(message: types.Message):
    top_user = max(user_expenses, key=lambda user: sum(amount for _, amount, _ in user_expenses[user]), default=None)
    if top_user is None:
        await message.answer("üö® –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å–∞–º–æ–≥–æ —Ç—Ä–∞–Ω–∂–∏—Ä–Ω–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è!")
    else:
        top_amount = sum(amount for _, amount, _ in user_expenses[top_user])
        await message.answer(f"üèÜ –°–∞–º—ã–π —Ç—Ä–∞–Ω–∂–∏—Ä–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å: {top_user} —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏: {top_amount:.2f} ‚Ç¨")

# –ö–æ–º–∞–Ω–¥–∞ /delete_expenses –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤
@dp.message_handler(commands=['delete_expenses'])
async def cmd_delete_expenses(message: types.Message):
    user_id = message.from_user.id
    if not user_expenses[user_id]:
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å:\n"
        "1Ô∏è‚É£ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥\n"
        "2Ô∏è‚É£ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ä–∞—Å—Ö–æ–¥–∞\n"
        "3Ô∏è‚É£ –í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è"
    )

    # –û–∂–∏–¥–∞–µ–º –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await dp.bot.register_message_handler(delete_expense_handler, lambda msg: msg.from_user.id == message.from_user.id)

async def delete_expense_handler(message: types.Message):
    user_id = message.from_user.id
    choice = message.text.strip()

    if choice == '1Ô∏è‚É£ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥':
        if user_expenses[user_id]:
            deleted_expense = user_expenses[user_id].pop()
            await message.answer(f"‚úÖ –£–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥: {deleted_expense[0]} - {deleted_expense[1]:.2f} ‚Ç¨")
        else:
            await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    elif choice == '2Ô∏è‚É£ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ä–∞—Å—Ö–æ–¥–∞':
        if len(user_expenses[user_id]) >= 3:
            deleted_expenses = user_expenses[user_id][-3:]
            user_expenses[user_id] = user_expenses[user_id][:-3]
            deleted_report = "\n".join([f"‚Ä¢ {cat} - {amt:.2f} ‚Ç¨" for cat, amt, _ in deleted_expenses])
            await message.answer(f"‚úÖ –£–¥–∞–ª–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ä–∞—Å—Ö–æ–¥–∞:\n{deleted_report}")
        else:
            await message.answer("‚ùå –£ —Ç–µ–±—è –º–µ–Ω—å—à–µ 3 —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    elif choice == '3Ô∏è‚É£ –í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è':
        today = datetime.today().date()
        expenses_to_delete = [expense for expense in user_expenses[user_id] if expense[2].date() == today]
        if expenses_to_delete:
            user_expenses[user_id] = [expense for expense in user_expenses[user_id] if expense[2].date() != today]
            deleted_report = "\n".join([f"‚Ä¢ {cat} - {amt:.2f} ‚Ç¨" for cat, amt, _ in expenses_to_delete])
            await message.answer(f"‚úÖ –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n{deleted_report}")
        else:
            await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ 1, 2 –∏–ª–∏ 3.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤
@dp.message_handler()
async def handle_expense(message: types.Message):
    try:
        user_id = message.from_user.id
        text = message.text.strip()

        if text.count(' ') < 1:
            await message.answer("‚ùå –§–æ—Ä–º–∞—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å—É–º–º–∞'. –ù–∞–ø—Ä–∏–º–µ—Ä: '–ï–¥–∞ 20'.")
            return

        *category_parts, amount_str = text.rsplit(' ', 1)
        category = ' '.join(category_parts)
        amount = float(amount_str)

        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
            return

        user_expenses[user_id].append((category, amount, datetime.now()))  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥ —Å –¥–∞—Ç–æ–π

        response_message = f"‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω: {category} - {amount:.2f} ‚Ç¨\n"
        
        # –ï—Å–ª–∏ —Å—É–º–º–∞ –±–æ–ª—å—à–µ 20, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        if amount > 20:
            response_message += "üí∏ –≠, –ø–æ–ª–µ–≥—á–µ, —Ç—Ä–∞–Ω–∂–∏—Ä–∞! –Ø —Ç—É—Ç –ø—ã—Ç–∞—é—Å—å —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –¥–µ–Ω—å–≥–∏! üòÖ"
        
        # –ü–æ—Ö–≤–∞–ª–∞ –∑–∞ —ç–∫–æ–Ω–æ–º–∏—é
        min_spender = min(user_expenses, key=lambda user: sum(amount for _, amount, _ in user_expenses[user]))
        if user_id == min_spender:
            response_message += f"üéâ –¢—ã –∫–æ—Ä–æ–ª—å —ç–∫–æ–Ω–æ–º–∏–∏, {message.from_user.first_name}!"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–¥–Ω–æ–º
        await message.answer(response_message)

    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å—É–º–º–∞'. –ù–∞–ø—Ä–∏–º–µ—Ä: '–ï–¥–∞ 20'.")

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True)
